import {
{{#each events}}  
  {{name}},
{{/each}}
} from "../generated/{{name}}/Contract";
import {
{{#each events}}
  {{../name}}{{name}}Entity,
{{/each}}
} from "../generated/schema";
import {
{{#each events}}
  {{#each fields}} 
    {{#if factory}}
  {{factory}},
    {{/if}}
  {{/each}}
{{/each}}
} from "./factories"
import { log } from "@graphprotocol/graph-ts";

{{#each events}}
export function handle{{name}}(event: {{name}}): void {
  const ID = `${event.transaction.hash.toHex()}-${event.transactionLogIndex.toString()}`;

  if (!!{{../name}}{{name}}Entity.load(ID)) {
    log.warning("Entity({}) exists!", [ID]);
  }

  let entity = new {{../name}}{{name}}Entity(ID);
  entity.block = event.block.number;
  entity.msgSender = event.transaction.from;
  entity.msgValue = event.transaction.value;
  entity.transactionHash = event.transaction.hash;
  {{#each fields}} 
    {{#if factory}}
      {{#if isArray}}
  entity.{{safeId name}} = []
  for(let i = 0; i < event.params.{{name}}.length; i++) {
    const e = event.params.{{name}}[i];
    entity.{{safeId name}}.push({{factory}}(e, ID+i.toString()))
  }
      {{else}}
  entity.{{safeId name}} = {{factory}}(event.params.{{name}}, ID)
      {{/if}}
    {{else}}
  entity.{{safeId name}} = event.params.{{name}}
    {{/if}}
  {{/each}}
  entity.save();
}
{{/each}}
