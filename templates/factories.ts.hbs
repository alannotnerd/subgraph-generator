import {
{{#each contracts}}
  {{#each factories}}
  {{name}},
  {{/each}}
{{/each}}
} from "../generated/schema"

{{#each contracts}}
import {
  {{#each factories}}
  {{wrapStruct name ../name}},
  {{/each}}
} from "../generated/{{name}}/Contract"
{{/each}}

{{#each contracts}}
// {{name}}
  {{#each factories}}

type F{{name}} = (params: {{wrapStruct name ../name}}, id: string) => string
export const {{name}}__factory: F{{name}} = (params, id) => {
  const entity = new {{name}}(id);
    {{#each fields}}
      {{#if factory}}
        {{#if isArray}}
  entity.{{safeId name}} = []
  for(let i = 0; i < params.{{name}}.length; i++) {
    const e = params.{{name}}[i];
    entity.{{safeId name}}.push({{factory}}__factory(e, id+i.toString()))
  }
        {{else}}
  entity.{{safeId name}} = {{factory}}__factory(params.{{name}}, id);
        {{/if}}
      {{else}}
  entity.{{safeId name}} = params.{{name}};
      {{/if}}
    {{/each}}
  entity.save();
  return id;
}
  {{/each}}
{{/each}}
